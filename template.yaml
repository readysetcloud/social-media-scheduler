AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless Social Post Scheduler - Schedule and Track Social Media Posts with Events

Parameters:
  LinkedInClientIdPersonal:
    Type: String
    Default: ''
    NoEcho: true
  LinkedInClientSecretPersonal:
    Type: String
    Default: ''
    NoEcho: true
  LinkedInClientIdOrganization:
    Type: String
    Default: ''
    NoEcho: true
  LinkedInClientSecretOrganization:
    Type: String
    Default: ''
    NoEcho: true
  DiscordToken:
    Type: String
    Default: ''
    NoEcho: true

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - '@aws-sdk/*'

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    CodeUri: functions
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  AccountApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  PostScheduleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
        - AttributeName: campaign
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: schedules
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: sort
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: campaigns
          KeySchema:
            - AttributeName: campaign
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  LinkedInSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Sub:
          - |-
            {
              "personalClientId": "${personalClientId}",
              "personalClientSecret": "${personalClientSecret}",
              "organizationClientId": "${organizationClientId}",
              "organizationClientSecret": "${organizationClientSecret}",
              "discord": "${discordToken}"
            }
          - personalClientId: !Ref LinkedInClientIdPersonal
            personalClientSecret: !Ref LinkedInClientSecretPersonal
            organizationClientId: !Ref LinkedInClientIdOrganization
            organizationClientSecret: !Ref LinkedInClientSecretOrganization
            discordToken: !Ref DiscordToken

  AuthenticateLinkedInFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - authenticate-linkedin.mjs
    Properties:
      Handler: authenticate-linkedin.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref LinkedInSecrets
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt PostScheduleTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
          SECRET_ID: !Ref LinkedInSecrets
      Events:
        AuthEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /linkedin/authenticate
            Method: POST

  SendXPostFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-x-post.mjs
    Properties:
      Handler: send-x-post.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/social-media/*

  UploadMediaToXFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - upload-media-to-x.mjs
    Properties:
      Handler: upload-media-to-x.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/social-media/*

  SendDiscordMessageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-discord-message.mjs
    Properties:
      Handler: send-discord-message.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref LinkedInSecrets
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt PostScheduleTable.Arn
      Environment:
        Variables:
          SECRET_ID: !Ref LinkedInSecrets
          TABLE_NAME: !Ref PostScheduleTable

  GetAccountConfigFormFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - get-account-config-form.mjs
    Properties:
      Handler: get-account-config-form.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt PostScheduleTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
      Events:
        GetDetailEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /accounts/{accountId}
            Method: GET

  ListAccountsPageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - list-accounts-page.mjs
    Properties:
      Handler: list-accounts-page.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${PostScheduleTable.Arn}/index/schedules
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
      Events:
        GetAccountsEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /accounts
            Method: GET

  AddAccountFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - add-account.mjs
    Properties:
      Handler: add-account.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt PostScheduleTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
      Events:
        AddEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /accounts
            Method: POST

  UpdateAccountFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - update-account.mjs
    Properties:
      Handler: update-account.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:DeleteParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/social-media/*
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt PostScheduleTable.Arn
            - Effect: Allow
              Action: scheduler:DeleteSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/token-expiration/*
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
      Events:
        UpdateEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /accounts/{accountId}
            Method: PUT

  DeleteSocialCampaignFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - delete-social-campaign.mjs
    Properties:
      Handler: delete-social-campaign.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt PostScheduleTable.Arn
            - Effect: Allow
              Action: scheduler:DeleteSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/social/*
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
      Events:
        DeleteEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Delete Social Campaign

  SendTestPostFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-test-post.mjs
    Properties:
      Handler: send-test-post.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt SendXPostFunction.Arn
                - !GetAtt SendDiscordMessageFunction.Arn
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt PostScheduleTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
          SEND_TWITTER_POST_ARN: !GetAtt SendXPostFunction.Arn
          SEND_DISCORD_POST_ARN: !GetAtt SendDiscordMessageFunction.Arn
      Events:
        TestEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /accounts/{accountId}/messages
            Method: POST

  CaptureLinkedInTokenFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - capture-linkedin-token.mjs
    Properties:
      Handler: capture-linkedin-token.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:PutParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/social-media/*
            - Effect: Allow
              Action: secretsmanager:GetSecretValue
              Resource: !Ref LinkedInSecrets
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt PostScheduleTable.Arn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:UpdateSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/token-expiration/*
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt ExpireLinkedInCredentialsSchedulerRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref PostScheduleTable
          SECRET_ID: !Ref LinkedInSecrets
          EXPIRE_LI_CREDENTIALS_STATE_MACHINE: !GetAtt ExpireLinkedInCredentialsStateMachine.Arn
          EXPIRE_LI_CREDENTIALS_ROLE: !GetAtt ExpireLinkedInCredentialsSchedulerRole.Arn
      Events:
        AuthEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AccountApi
            Path: /linkedin/redirect
            Method: GET

  SocialPostScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: social

  TokenExpirationScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: token-expiration

  ScheduleSocialStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/schedule-social-post.asl.json
      DefinitionSubstitutions:
        SchedulerCreateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:createSchedule
        SchedulerGetSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:getSchedule
        SchedulerUpdateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:updateSchedule
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        SchedulerRole: !GetAtt SendSocialPostSchedulerRole.Arn
        SendSocialPostStateMachine: !Ref SendSocialStateMachine
        DeadLetterQueue: !GetAtt SocialPostDLQ.Arn
        TableName: !Ref PostScheduleTable
        DynamoDbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        DynamoDbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        UnmarshallDataFunction: "{{resolve:ssm:/serverless-toolbox/marshall-unmarshall-data}}"
        CalculateScheduleFunction: !GetAtt CalculateScheduledTimeFunction.Arn
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:GetSchedule
                - scheduler:UpdateSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/social/*
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SendSocialPostSchedulerRole.Arn
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - "{{resolve:ssm:/serverless-toolbox/marshall-unmarshall-data}}"
                - !GetAtt CalculateScheduledTimeFunction.Arn
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt PostScheduleTable.Arn
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${PostScheduleTable.Arn}/index/schedules
      Events:
        ScheduledSocialPostEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Schedule Social Post

  ExpireLinkedInCredentialsSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ExpireLISchedulerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt ExpireLinkedInCredentialsStateMachine.Arn

  ExpireCredentialsStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3

  ExpireLinkedInCredentialsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ExpireCredentialsStateMachineLogGroup.Arn
      DefinitionUri: state-machines/expire-linkedin-credentials.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        DynamoDbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        TableName: !Ref PostScheduleTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt PostScheduleTable.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"

  SendSocialStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: state-machines/send-social-post.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        SendTwitterPost: !GetAtt SendXPostFunction.Arn
        UploadImageToTwitter: !GetAtt UploadMediaToXFunction.Arn
        SendDiscordMessage: !GetAtt SendDiscordMessageFunction.Arn
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        DynamoDbDeleteItem: !Sub arn:${AWS::Partition}:states:::dynamodb:deleteItem
        TableName: !Ref PostScheduleTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt SendXPostFunction.Arn
                - !GetAtt UploadMediaToXFunction.Arn
                - !GetAtt SendDiscordMessageFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt PostScheduleTable.Arn

  SendSocialPostSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendSocialPostSchedulerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt SendSocialStateMachine.Arn

  SocialPostDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600

  DLQAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SocialPostAlarm

  DLQAgeAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: SocialPostAlarm
      AlarmDescription: Alarm if failed social post messages stay in DLQ for more than 1 hour
      Namespace: AWS/SQS
      MetricName: ApproximateAgeOfOldestMessage
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3600
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref DLQAlarmTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SocialPostDLQ.QueueName

  CalculateScheduledTimeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - calculate-scheduled-time.mjs
    Properties:
      Handler: calculate-scheduled-time.handler
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action: 'bedrock:InvokeModel'
              Resource: '*'

Outputs:
  ApiBaseUrl:
    Description: API Gateway endpoint for the account API
    Value: !Sub 'https://${AccountApi}.execute-api.${AWS::Region}.amazonaws.com/v1'
